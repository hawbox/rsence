
This guide is also available in HTML at http://rsence.org/trac/wiki/QuickStart

INSTALLATION



1. INSTALLING SYSTEM DEPENDENCIES


1.1. Mac OS X

 - Install a recent version of [http://developer.apple.com/mac/ XCode] to get at least the gnu compiler collection.

 - Install the most recent version of [http://www.macports.org/ MacPorts]

 - Update rubygems to the most recent version, unless you do it regularly anyway:
 
---
  sudo gem update --system
  sudo gem update
---

1.1.1 Mac OS X 10.4 and 10.5

 - Install a these packages using Terminal:

---
  sudo port install ruby +thread_hooks
  sudo port install rb-rubygems
  sudo port install sqlite3-ruby
---


1.1.2 Mac OS X 10.6

 - Install a these packages using Terminal:

---
  sudo port install sqlite3
---


1.2. Debian and Ubuntu GNU Linux

 - Install these packages:

---
  sudo apt-get install build-essential ruby-full sqlite3-ruby rubygems rake
---


1.99. Unsupported UNX-like operating system
      (Applies to Linux distributions not listed above)

 You'll have to figure out how to install the dependencies on your own,
 but generally this is the list of software you should look for:

 - Ruby 1.8.7 or newer

 - Rake (ruby replacement for make)

 - Sqlite

 - Ruby Gems

 - A standard set of compilers and build tools



2. RUBY PACKAGES (RUBY GEMS)

These ruby gems are required:

 - rake (not required, if you have a system package of it installed)

 - rack

 - thin (or another rack-compatible http server library)

 - json

 - Required by persistent session storage:

   - sqlite3-ruby

   - sequel


These ruby gems are recommended. The system will run without them but manual reconfiguration might be needed.

 - cssmin

 - highline (not required, if you don't need the setup wizard)

 - soap4r (not required, if you don't need to create SOAP services)

 - rmagick (not required, but used by many projects)



2.1. Command-line installation example of the gems

---
  sudo gem install rake highline rack thin soap4r rmagick json sequel
---



3. SETTING UP A PROJECT


3.1. Create a directory for your project
This directory will contain everything needed to run your application.

---
mkdir my_riassence_project
cd my_riassence_project
mkdir conf # optional, place additional configuration files here
mkdir plugins # optional, place your local plugins here
mkdir lib # optional, place your libraries here
mkdir js # optional, create your JavaScript components here
---


3.2. Make a checkout of the Riassence Framework

 - You'll need an directory called "rsence" in your project directory
   that contains the framework.
   
 - There are three main options: release, stable, trunk. Choose one of these:
  * release: latest release version, recommended for production deployment
  * stable: the latest stable version (constant release candidate),
            recommended for production development
  * trunk: the latest bleeding edge version, recommended for developing the
           framework itself or testing out the newest features


3.2.1. The latest release version

 - Download http://rsence.org/files/releases/rsence_1.1.0.tar.bz2

 - Extract its contents into the project directory


3.2.2. The latest stable version

 - Make a checkout of /branches/rc as rsence:

---
  svn co https://svn.rsence.org/branches/rc rsence
---


3.2.3. The trunk

 - Make a checkout of /trunk as rsence:

---
  svn co https://svn.rsence.org/trunk rsence
---


3.3. Setup the Riassence Framework

Currently, a few additional steps are needed to get the environment set up.
In a future version, we'll simplify the whole process by just including
rsence as a gem.


3.3.1. Make the binaries executable

You may skip this step, if you downloaded the release version.
This makes the rsence process control scripts executable.

---
  chmod +x rsence/bin/*
---


3.3.2. Build the C-optimized extensions

Build the C-optimized extensions:

---
  rsence/bin/build_extensions.rb
---


3.3.3. Build the Javascript client library packages

This will create a directory named "client" in your project directory. It
contains a set of optimized Javascript and theme packages required by the
Riassence Client Framework.

---
  rsence/bin/build_client.rb
---


3.3.4. Start the server and run the configuration wizard
       (doesn't apply to preconfigured projects)


3.3.4.1. Start the server in the more verbose development mode (the -d switch)

---
  rsence/bin/start -d
---


3.3.4.2. Answer the setup questions

 - Press enter for each question to choose the default option.

 - Eg. pressing enter at a Y/n prompt will select Y


3.3.4.3. Open your web browser to check if the server responds

 - On a default installation, the riassence server framework listens to port 8001

 - To test it, open the address [http://localhost:8001/]

 - A brief "Loading, please wait..." -message, followed by the plugin ui's configured to run is a sign of success.


3.3.4.4. Inspect the log files

 - In case of installation issues, check the log files.

 - The log files are by default in the '''rsence/var/log''' directory.


3.3.4.5. Stop the server

---
  rsence/bin/stop
---



4. CONTROLLING THE RIASSENCE SERVER FRAMEWORK PROCESS


4.1. Starting the server

 - Either use the "rsence/bin/start" -command or use "rsence/bin/launch.rb start"

 - By default, it will look for a settings file "rsence/conf/local_conf.rb"

 - If a settings file is not found, the setup wizard will run; see section 3.3.4


4.2. Starting the server

 - Use the "rsence/bin/stop" -command


4.3. Checking the server status

 - Use the "rsence/bin/status" -command


4.4. Restarting the server

 - Use the "rsence/bin/restart" -command


4.5. Re-setting the sessions

 - Start or restart the server with the "--reset-sessions" switch


4.6. Running in development mode

 - Start or restart the server with the "-d" switch


4.6.1. What does development mode do?

 - Plugins are reloaded for each index-page load (every time when the browser reloads the "/ -page")

 - Built Javascript packages are reloaded, if changed.

 - More verbose log output is generated


4.7. More command-line options

---
  rsence/bin/launch.rb help
---


5. PLUGIN DEPLOYMENT

If you followed, the previous steps, you are ready to deploy some software.

 - In development mode (see 4.6.), plugins are (re)loaded on each page reload

 - In production mode, a server restart is required (see 4.4.)

 - By default, "rsence/plugins" is the only plugin directory. Edit the
   configuration file to enable other directories.

 - Sample plugins are available in the repository URL directory
   https://svn.rsence.org/contrib/plugins


5.1. Deploying plugins

 - Copy or move a plugin bundle into the "plugins" directory to
   enable the plugin.


5.2. Un-deploying plugins

 - Copy or move a plugin bundle out of the the "plugins" directory.


5.3. Temporarily disabling a plugin

 - Create an empty file named "disabled" in the plugin bundle to disable it.

---
 touch rsence/plugins/componentsampler/disabled
---



6. PLUGIN DEVELOPMENT


6.1. The Hello World -plugin


6.1.1. Create a plugin bundle


 - Create a directory named "hello_world" inside the "rsence/plugins" directory.

 - Create a ruby source file inside the "hello_world" directory named "hello_world.rb".

 - The ruby source file (without the .rb extension) must match the name of the directory for the bundle to be recognized.


6.1.2. Display a "Hello World" message using the Javascript client framework

Copy/paste this ruby source into the "hello_world.rb" file created in section 6.1.1:

---

class HelloWorld < Plugin
  # Let's say hello to the web browser by just replying some javascript:
  def say_hello(msg, who)
    include_js( msg, ['controls'] )
    msg.reply "var helloApp = HApplication.nu();"
    msg.reply "var helloWinRect = HRect.nu(20,20,320,60);"
    msg.reply "helloApp.helloWin = HWindow.nu(helloWinRect, helloApp, {label: 'Hello, #{who}!'});"
  end
  def init_ui(msg)
    # Let's say hello, when the bootstrap is done:
    say_hello(msg, 'World')
  end
end
HelloWorld.new.register('hello_world')

---

6.2. The Visitor Counter Plugin bundle

Read the tutorial at: http://rsence.org/trac/wiki/Tutorials/VisitorCounter
