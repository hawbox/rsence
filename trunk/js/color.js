
HColorValue=HValue.extend({constructor:function(H6,H3){this.validate(H3);this.base(H6,H3);this.type='[ColorValue]';},validate:function(H3){if(!H3 instanceof Array){throw('ColorValueError: ColorValue must be array');}
if(H3.length!=3){throw('ColorValueError: ColorValues need three parts');}},set:function(H3){if(H3==this.value){return;}
if(H3===undefined){throw('ColorValueError: Tried to set '+H3);}
this.validate(H3);var _rgbval=new Array(3);for(_colorPart=0;_colorPart<3;_colorPart++){var _colorVal=H3[_colorPart];if((_colorVal<0)||(_colorVal>255)){_rgbval[_colorPart]=this.value[_colorPart];}else{_rgbval[_colorPart]=_colorVal;}}
this.base(_rgbval);},getRed:function(){return this.value[0];},getGreen:function(){return this.value[1];},getBlue:function(){return this.value[2];},setRed:function(_redVal){this.set([Math.round(_redVal),-1,-1]);},setGreen:function(_grnVal){this.set([-1,Math.round(_grnVal),-1]);},setBlue:function(_bluVal){this.set([-1,-1,Math.round(_bluVal)]);},toRGBString:function(){return'rgb('+this.value[0]+', '+this.value[1]+', '+this.value[2]+')';},_initHexArr:function(){this._hexArr=new Array(256);var _hexStr=['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];for(var _majorBit=0;_majorBit<16;_majorBit++){for(var _minorBit=0;_minorBit<16;_minorBit++){var _decVal=(_majorBit*16)+_minorBit;var _hexVal=_hexStr[_majorBit]+_hexStr[_minorBit];this._hexArr[_decVal]=_hexVal;}}},toHexString:function(_toLowerCase){if(!this._hexArr){this._initHexArr();}
var _redHex=this._hexArr[this.getRed()];var _grnHex=this._hexArr[this.getGreen()];var _bluHex=this._hexArr[this.getBlue()];var _hexString='#'+_redHex+_grnHex+_bluHex;if(_toLowerCase){_hexString=_hexString.toLowerCase();}
return _hexString;},toXML:function(HT){var H0t=this.id;var _syncRed=this.getRed();var _syncGrn=this.getGreen();var _syncBlu=this.getBlue();var _syncHex=this.toHexString();return'<color id="'+H0t+'" order="'+HT+'" hexvalue="'+_syncHex+'"><red>'+_syncRed+'</red><green>'+_syncGrn+'</green><blue>'+_syncBlu+'</blue></color>';}});HColorView=HControl.extend({componentName:"colorview",constructor:function(H0,H4,H1){if(!H1){H1={};}
if(!H1.events){H1.events={mouseDown:true}}
if(this.isinherited){this.base(H0,H4,H1);}
else{this.isinherited=true;this.base(H0,H4,H1);this.isinherited=false;}
this.type='[HColorView]';this.preserveTheme=true;if(!this.isinherited){this.draw();}},draw:function(){this.drawRect();if(!this.drawn){this.drawMarkup();this.drawn=true;}},mouseDown:function(H8,H9,_rightButton){if(this.action){this.action(this.valueObj);}},setValue:function(_colorArr){this.base(_colorArr);if(this.valueObj instanceof HColorValue){this.setStyle('background-color',this.valueObj.toHexString());}}});HColorSwatchItem=HColorView;HColorValueMixer=Base.extend({constructor:function(_target,_red,_grn,_blu){this.target=_target;if((typeof _red=='number')&&(typeof _grn=='number')&&(typeof _blu=='number')){this.mixRed=_red;this.mixGrn=_grn;this.mixBlu=_blu;}else{throw("HColorValueMixerConstructorError: The mixable color parts have to be numerics, usually floating point values in the range 0.0 - 1.0.");}},setValue:function(H3){var _valueInt=Math.round(H3);if(this.target.valueObj instanceof HColorValue){var _colorValueObj=this.target.valueObj;}else{return}
if(this.mixRed){_colorValueObj.setRed(_valueInt*this.mixRed);}
if(this.mixGrn){_colorValueObj.setGreen(_valueInt*this.mixGrn);}
if(this.mixBlu){_colorValueObj.setBlue(_valueInt*this.mixBlu);}
this.valueObj.set(_valueInt);},setValueObj:function(H1b){this.valueObj=H1b;this.setValue(H1b.value);}});